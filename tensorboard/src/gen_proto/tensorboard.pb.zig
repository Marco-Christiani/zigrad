// Code generated by protoc-gen-zig
///! package tensorboard
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const ResourceHandleProto = struct {
    device: ManagedString = .Empty,
    container: ManagedString = .Empty,
    name: ManagedString = .Empty,
    hash_code: u64 = 0,
    maybe_type_name: ManagedString = .Empty,

    pub const _desc_table = .{
        .device = fd(1, .String),
        .container = fd(2, .String),
        .name = fd(3, .String),
        .hash_code = fd(4, .{ .Varint = .Simple }),
        .maybe_type_name = fd(5, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TensorShapeProto = struct {
    dim: ArrayList(Dim),
    unknown_rank: bool = false,

    pub const _desc_table = .{
        .dim = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .unknown_rank = fd(3, .{ .Varint = .Simple }),
    };

    pub const Dim = struct {
        size: i64 = 0,
        name: ManagedString = .Empty,

        pub const _desc_table = .{
            .size = fd(1, .{ .Varint = .Simple }),
            .name = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const DataType = enum(i32) {
    DT_INVALID = 0,
    DT_FLOAT = 1,
    DT_DOUBLE = 2,
    DT_INT32 = 3,
    DT_UINT8 = 4,
    DT_INT16 = 5,
    DT_INT8 = 6,
    DT_STRING = 7,
    DT_COMPLEX64 = 8,
    DT_INT64 = 9,
    DT_BOOL = 10,
    DT_QINT8 = 11,
    DT_QUINT8 = 12,
    DT_QINT32 = 13,
    DT_BFLOAT16 = 14,
    DT_QINT16 = 15,
    DT_QUINT16 = 16,
    DT_UINT16 = 17,
    DT_COMPLEX128 = 18,
    DT_HALF = 19,
    DT_RESOURCE = 20,
    DT_FLOAT_REF = 101,
    DT_DOUBLE_REF = 102,
    DT_INT32_REF = 103,
    DT_UINT8_REF = 104,
    DT_INT16_REF = 105,
    DT_INT8_REF = 106,
    DT_STRING_REF = 107,
    DT_COMPLEX64_REF = 108,
    DT_INT64_REF = 109,
    DT_BOOL_REF = 110,
    DT_QINT8_REF = 111,
    DT_QUINT8_REF = 112,
    DT_QINT32_REF = 113,
    DT_BFLOAT16_REF = 114,
    DT_QINT16_REF = 115,
    DT_QUINT16_REF = 116,
    DT_UINT16_REF = 117,
    DT_COMPLEX128_REF = 118,
    DT_HALF_REF = 119,
    DT_RESOURCE_REF = 120,
    _,
};

pub const TensorProto = struct {
    dtype: DataType = @enumFromInt(0),
    tensor_shape: ?TensorShapeProto = null,
    version_number: i32 = 0,
    tensor_content: ManagedString = .Empty,
    half_val: ArrayList(i32),
    float_val: ArrayList(f32),
    double_val: ArrayList(f64),
    int_val: ArrayList(i32),
    string_val: ArrayList(ManagedString),
    scomplex_val: ArrayList(f32),
    int64_val: ArrayList(i64),
    bool_val: ArrayList(bool),
    dcomplex_val: ArrayList(f64),
    resource_handle_val: ArrayList(ResourceHandleProto),

    pub const _desc_table = .{
        .dtype = fd(1, .{ .Varint = .Simple }),
        .tensor_shape = fd(2, .{ .SubMessage = {} }),
        .version_number = fd(3, .{ .Varint = .Simple }),
        .tensor_content = fd(4, .String),
        .half_val = fd(13, .{ .PackedList = .{ .Varint = .Simple } }),
        .float_val = fd(5, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .double_val = fd(6, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .int_val = fd(7, .{ .PackedList = .{ .Varint = .Simple } }),
        .string_val = fd(8, .{ .List = .String }),
        .scomplex_val = fd(9, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .int64_val = fd(10, .{ .PackedList = .{ .Varint = .Simple } }),
        .bool_val = fd(11, .{ .PackedList = .{ .Varint = .Simple } }),
        .dcomplex_val = fd(12, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .resource_handle_val = fd(14, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SummaryDescription = struct {
    type_hint: ManagedString = .Empty,

    pub const _desc_table = .{
        .type_hint = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const HistogramProto = struct {
    min: f64 = 0,
    max: f64 = 0,
    num: f64 = 0,
    sum: f64 = 0,
    sum_squares: f64 = 0,
    bucket_limit: ArrayList(f64),
    bucket: ArrayList(f64),

    pub const _desc_table = .{
        .min = fd(1, .{ .FixedInt = .I64 }),
        .max = fd(2, .{ .FixedInt = .I64 }),
        .num = fd(3, .{ .FixedInt = .I64 }),
        .sum = fd(4, .{ .FixedInt = .I64 }),
        .sum_squares = fd(5, .{ .FixedInt = .I64 }),
        .bucket_limit = fd(6, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .bucket = fd(7, .{ .PackedList = .{ .FixedInt = .I64 } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SummaryMetadata = struct {
    plugin_data: ArrayList(PluginData),

    pub const _desc_table = .{
        .plugin_data = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const PluginData = struct {
        plugin_name: ManagedString = .Empty,
        content: ManagedString = .Empty,

        pub const _desc_table = .{
            .plugin_name = fd(1, .String),
            .content = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Summary = struct {
    value: ArrayList(Value),

    pub const _desc_table = .{
        .value = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const Image = struct {
        height: i32 = 0,
        width: i32 = 0,
        colorspace: i32 = 0,
        encoded_image_string: ManagedString = .Empty,

        pub const _desc_table = .{
            .height = fd(1, .{ .Varint = .Simple }),
            .width = fd(2, .{ .Varint = .Simple }),
            .colorspace = fd(3, .{ .Varint = .Simple }),
            .encoded_image_string = fd(4, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Audio = struct {
        sample_rate: f32 = 0,
        num_channels: i64 = 0,
        length_frames: i64 = 0,
        encoded_audio_string: ManagedString = .Empty,
        content_type: ManagedString = .Empty,

        pub const _desc_table = .{
            .sample_rate = fd(1, .{ .FixedInt = .I32 }),
            .num_channels = fd(2, .{ .Varint = .Simple }),
            .length_frames = fd(3, .{ .Varint = .Simple }),
            .encoded_audio_string = fd(4, .String),
            .content_type = fd(5, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Value = struct {
        node_name: ManagedString = .Empty,
        tag: ManagedString = .Empty,
        metadata: ?SummaryMetadata = null,
        value: ?value_union,

        pub const _value_case = enum {
            simple_value,
            obsolete_old_style_histogram,
            image,
            histo,
            audio,
            tensor,
        };
        pub const value_union = union(_value_case) {
            simple_value: f32,
            obsolete_old_style_histogram: ManagedString,
            image: Summary.Image,
            histo: HistogramProto,
            audio: Summary.Audio,
            tensor: TensorProto,
            pub const _union_desc = .{
                .simple_value = fd(2, .{ .FixedInt = .I32 }),
                .obsolete_old_style_histogram = fd(3, .String),
                .image = fd(4, .{ .SubMessage = {} }),
                .histo = fd(5, .{ .SubMessage = {} }),
                .audio = fd(6, .{ .SubMessage = {} }),
                .tensor = fd(8, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .node_name = fd(7, .String),
            .tag = fd(1, .String),
            .metadata = fd(9, .{ .SubMessage = {} }),
            .value = fd(null, .{ .OneOf = value_union }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Event = struct {
    wall_time: f64 = 0,
    step: i64 = 0,
    what: ?what_union,

    pub const _what_case = enum {
        file_version,
        graph_def,
        summary,
        log_message,
        session_log,
        tagged_run_metadata,
        meta_graph_def,
    };
    pub const what_union = union(_what_case) {
        file_version: ManagedString,
        graph_def: ManagedString,
        summary: Summary,
        log_message: LogMessage,
        session_log: SessionLog,
        tagged_run_metadata: TaggedRunMetadata,
        meta_graph_def: ManagedString,
        pub const _union_desc = .{
            .file_version = fd(3, .String),
            .graph_def = fd(4, .String),
            .summary = fd(5, .{ .SubMessage = {} }),
            .log_message = fd(6, .{ .SubMessage = {} }),
            .session_log = fd(7, .{ .SubMessage = {} }),
            .tagged_run_metadata = fd(8, .{ .SubMessage = {} }),
            .meta_graph_def = fd(9, .String),
        };
    };

    pub const _desc_table = .{
        .wall_time = fd(1, .{ .FixedInt = .I64 }),
        .step = fd(2, .{ .Varint = .Simple }),
        .what = fd(null, .{ .OneOf = what_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const LogMessage = struct {
    level: Level = @enumFromInt(0),
    message: ManagedString = .Empty,

    pub const _desc_table = .{
        .level = fd(1, .{ .Varint = .Simple }),
        .message = fd(2, .String),
    };

    pub const Level = enum(i32) {
        UNKNOWN = 0,
        DEBUG = 10,
        INFO = 20,
        WARN = 30,
        ERROR = 40,
        FATAL = 50,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SessionLog = struct {
    status: SessionStatus = @enumFromInt(0),
    checkpoint_path: ManagedString = .Empty,
    msg: ManagedString = .Empty,

    pub const _desc_table = .{
        .status = fd(1, .{ .Varint = .Simple }),
        .checkpoint_path = fd(2, .String),
        .msg = fd(3, .String),
    };

    pub const SessionStatus = enum(i32) {
        STATUS_UNSPECIFIED = 0,
        START = 1,
        STOP = 2,
        CHECKPOINT = 3,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaggedRunMetadata = struct {
    tag: ManagedString = .Empty,
    run_metadata: ManagedString = .Empty,

    pub const _desc_table = .{
        .tag = fd(1, .String),
        .run_metadata = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
